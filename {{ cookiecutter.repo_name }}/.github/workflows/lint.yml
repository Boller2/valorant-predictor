name: PR flow

on:
  push:
    branches:
      - master
  pull_request:


env:
  poetry-version: {{ cookiecutter.poetry_version }}
  python-version: 3.9
  docker-registry: 003209562630.dkr.ecr.eu-central-1.amazonaws.com
  aws-region: eu-central-1
  s3-code-bucket: prod-analyzer-code
  env: 'prod'
  min-test-coverage-percent: 50

{% raw -%}
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # - name: Install necessary system packages
      #   run: sudo apt-get -y install hmmer

      - name: Setup python
        uses: actions/setup-python@v2
        id: setup-python
        with:
          python-version: ${{ env.python-version }}
      - run: |
          pip install poetry==${{ env.poetry-version }}

      - name: Cache poetry virtualenv
        id: cache-poetry
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Add github token to gitconfig for clonning dependencies
        run: |
          git config --global url."https://api:${{ secrets.CHECKOUT_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: poetry install

      - name: Cleanup token
        run: git config --global --remove-section url."https://api:${{ secrets.CHECKOUT_TOKEN }}@github.com/"

      - name: Lint
        run: |
          poetry run pre-commit run --all-files
          poetry run cz check -m "$(git log --format=%B -n 1)"

{%- endraw %}
      - name: Test
        run: |
          OUTPUT=$(poetry run pytest --doctest-modules --junitxml=junit/test-results.xml --cov={{ cookiecutter.repo_name }} --cov-report=xml --cov-report=html --cov-report=term-missing)
          CODE=$?
          echo "$OUTPUT" > pytest-output.txt
          echo "$OUTPUT"
          exit $CODE
{% raw %}
      - name: Upload pytest test results
        uses: actions/upload-artifact@v2
        with:
          name: pytest-results-${{ env.python-version }}
          path: |
            pytest-output.txt
            junit/test-results.xml
            coverage.xml
            htmlcov/
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@v1.1.6
        with:
          pytest-coverage-path: pytest-output.txt
          title: Coverage report
          badge-title: Coverage
          hide-badge: false
          hide-report: false
          create-new-comment: false
          hide-comment: false
          junitxml-path: junit/test-results.xml
        if: ${{ always() }}

      - name: Fail on too low coverage
        if: ${{ github.ref != 'refs/heads/master' }}
        run: poetry run coverage report --fail-under=${{ env.min-test-coverage-percent }}

  release:
    needs: test
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # - name: Install necessary system packages
      #   run: sudo apt-get -y install hmmer

      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - run: |
          pip install poetry==${{ env.poetry-version }}

      - name: Cache poetry virtualenv
        id: cache-poetry
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: poetry install

      - name: Create release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "action@github.com"
          poetry run semantic-release publish
{%- endraw %}
